@page "/"
@using System.Diagnostics
@using System.Threading
@using SortingDeploy.Data
@using SortingDeploy.Pages.Components
@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.BarChart.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Wrappers
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util

<h1>Hello world</h1>


<select class="form-control" @bind="sortingType">
    <option>Bubble Sort</option>
    <option>Selection Sort</option>
    <option>Insertion Sort</option>
</select>

<p></p>
<p>Number of randoms:</p>
<input type="range" min="4" max="50" step="1" value="printSize" @oninput="@((args) => CalcSize(args.Value.ToString()))" />
<p>@printSize</p>
<p>Range of randoms:</p>
<input type="range" min="5" max="100" step="1" value="printRange" @oninput="@((args) => CalcRange(args.Value.ToString()))" />
<p>@printRange</p>
<p>Speed:</p>
<input type="range" min="50" max="2000" step="1" value="printTime" @oninput="@((args) => CalcTime(args.Value.ToString()))" />
<p>@printTime</p>


<button class="btn btn-primary" @onclick="Sort" disabled="@IsDisabled">Click me</button>

<p>Random number: @stro</p>
<p>Sorting: @currentArray</p>
<div style="height: 300px; width: 500px">
    <ChartJsBarChart @ref="_barChart"
                     Config="@_barChartConfig"
                     Width="300"
                     Height="150" />
</div>


@code {

    SortingMethods srt = new SortingMethods();
    private bool b = false;
    private int arraySize = 10;
    private int[] array;
    private string stro = "";

    private string sortingType = "Bubble Sort";
    private int numberOfRandoms;
    private int rangeOfRandoms;
    private int timeOfCalc;
    private int printSize = 27;
    private int printRange = 52;
    private int printTime = 1017;
    private string currentArray;
    private string tempArray;
    private int check;
    private bool checkBool;
    protected bool IsDisabled { get; set; }
    private bool startScenario;


    private BarConfig _barChartConfig;
    private ChartJsBarChart _barChart;
    private BarDataset<DoubleWrapper> _barDataSet;

    public void CalcSize(string step)
    {

        printSize = Convert.ToInt32(step);

        Randomize();


    }
    public void CalcRange(string step)
    {
        printRange = Convert.ToInt32(step);

        Randomize();


    }
    public void CalcTime(string step)
    {
        printTime = Convert.ToInt32(step);
    }


    private void Randomize()
    {
        check = 1;

        startScenario = false;
        _barDataSet.RemoveRange(0, arraySize);
        _barChartConfig.Data.Labels.RemoveRange(0, arraySize);

        checkBool = true;
        array = new int[printSize];
        arraySize = printSize;

        stro = "";
        srt.CreateRandomArray(arraySize, array, printRange);
        for (int i = 0; i < array.Length; i++)
        {
            stro = stro + " " + array[i];
        }
        Debug.WriteLine(stro);


        Update(array);


    }

    private void Sort()
    {

        DisableCheck();


        if (sortingType == "Bubble Sort")
        {
            srt.BubbleSort(array, arraySize, this, timeOfCalc);
        }
        else if (sortingType == "Selection Sort")
        {
            srt.SelectionSort(array, arraySize, this, timeOfCalc);
        }
        else if (sortingType == "Insertion Sort")
        {
            srt.InsertionSort(array, arraySize, this, timeOfCalc);
        }



    }

    public async Task Update(int[] a)
    {
        array = a;

        if (check == 1)
        {
            Debug.WriteLine("Before add range: " + check);
            _barChartConfig.Data.Labels.AddRange(Range());

            Debug.WriteLine("After add range: " + check);
        }
       
        check++;
        if (check > 2)
        {
            _barDataSet.RemoveRange(0, arraySize);

        }

        _barDataSet.AddRange(DoubleArray().Wrap());

        await _barChart.Update();
      
        tempArray = "";

    }

    protected override void OnInitialized()
    {
        _barChartConfig = new BarConfig
        {
            Options = new BarOptionsSub
            {
                Animation = new Animation()
                {
                    Duration = 0
                },
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Simple Bar Chart"
                },

                Responsive = true,
                Scales = new BarScales
                {
                    YAxes = new List<CartesianAxis> {
                        new LinearCartesianAxis {
                            Ticks = new LinearCartesianTicks {
                                AutoSkip = false,
                                Min = 0 
                            }
                        }
                    }
                }
            }
        };


        check = 1;
        array = new int[printSize];
        arraySize = printSize;


        srt.CreateRandomArray(arraySize, array, printRange);

        _barDataSet = new BarDataset<DoubleWrapper>
        {
            Label = "",
            BackgroundColor = "red",
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };

        _barDataSet.AddRange(DoubleArray().Wrap());
        _barChartConfig.Data.Datasets.Add(_barDataSet);

        _barChartConfig.Data.Labels.AddRange(Range());
        checkBool = true;

        for (int i = 0; i < array.Length; i++)
        {
            stro = stro + " " + array[i];
        }
        Debug.WriteLine(stro);
        startScenario = true;
    }


    private double[] DoubleArray()
    {
        List<double> temp = new List<double>();
        if (array != null)
        {
            for (int i = 0; i < array.Length; i++)
            {
                temp.Add(array[i]);
            }
            double[] d = temp.ToArray();
            return d;
        }
        if (array == null)
        {
            double[] d = temp.ToArray();
            return d;
        }
        return null;
    }

    private string[] Range()
    {
        List<string> temp = new List<string>();
        if (array == null)
        {

            string[] str = temp.ToArray();
            return str;
        }
        else
        {
            for (int i = 0; i < array.Length; i++)
            {
                temp.Add(i + "");
            }
            string[] str = temp.ToArray();
            return str;
        }

    }

    public void DisableCheck()
    {

        if (IsDisabled)
        {
            IsDisabled = false;
        }
        else
        {
            IsDisabled = true;
        }
        if (startScenario)
        {
            _barChartConfig.Data.Labels.RemoveRange(0, arraySize);
            _barDataSet.RemoveRange(0, arraySize);
            startScenario = false;
        }
        StateHasChanged();
    }

}
