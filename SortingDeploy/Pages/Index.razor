@page "/"
@using System.Diagnostics
@using System.Threading
@using SortingDeploy.Data
@using SortingDeploy.Pages.Components

<h1>Hello world</h1>


<select class="form-control" @bind="sortingType">
    <option disabled selected hidden>Choice</option>
    <option>Bubble Sort</option>
    <option>Selection Sort</option>
    <option>Insertion Sort</option>
</select>

<p></p>
<p>Number of randoms:</p>
<input type="range" min="1" max="50" step="1" @bind="numberOfRandoms" />
<p>@printNumber</p>
<p>Range of randoms:</p>
<input type="range" min="1" max="100" step="1" @bind="rangeOfRandoms" />
<p>@printRange</p>
<button class="btn btn-primary" @onclick="Randomize">Click me</button>

<p>Random number: @stro</p>
<p>Sorting: @currentArray</p>
@if(array != null)
{
<SortingDeploy.Pages.Components.Chart array="array"/>
}


@code {

    SortingMethods srt = new SortingMethods();
    private bool b = false;
    private int arraySize = 10;
    private int[] array;
    private string stro = "";

    private string sortingType;
    private int numberOfRandoms;
    private int rangeOfRandoms;
    private int printNumber;
    private int printRange;
    private string currentArray;
    private string tempArray;



    protected void Randomize()
    {

        array = new int[numberOfRandoms];
        arraySize = numberOfRandoms;

        stro = "";
        srt.CreateRandomArray(arraySize, array, rangeOfRandoms);


        for (int i = 0; i < array.Length; i++)
        {
            stro = stro + " " + array[i];
        }

        if (sortingType == "Bubble Sort")
        {
            srt.BubbleSort(array, arraySize, this);
        }
        else if (sortingType == "Selection Sort")
        {
            srt.SelectionSort(array, arraySize);
        }
        else if (sortingType == "Insertion Sort")
        {
            srt.InsertionSort(array, arraySize);
        }

        printNumber = numberOfRandoms;
        printRange = rangeOfRandoms;

    }

    public async Task Update(int[] a)
    {
        array = a;

        for (int i = 0; i < array.Length; i++)
        {
            tempArray = tempArray + " " + array[i];
        }

        currentArray = tempArray;
        Debug.WriteLine("We are in the update");

        await Task.Delay(2);
        StateHasChanged();
        Debug.WriteLine(tempArray);
        tempArray = "";
    }


}
