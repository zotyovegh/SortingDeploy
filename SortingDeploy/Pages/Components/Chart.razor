@using System.Collections.Generic
@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.BarChart.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Wrappers
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util
@using Microsoft.AspNetCore.Components

<div style="height: 300px; width: 500px">
    <ChartJsBarChart @ref="_barChart"
                     Config="@_barChartConfig"
                     Width="300"
                     Height="150" />
</div>
@code{
    [Parameter] public int[] array { get; set; }
    [Parameter] public int arraySize { get; set; }
    private BarConfig _barChartConfig;
    private ChartJsBarChart _barChart;
    private BarDataset<DoubleWrapper> _barDataSet;


    protected override void OnInitialized()
    {
        _barChartConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Simple Bar Chart"
                },

                Responsive = true,
                Scales = new BarScales
                {

                    YAxes = new List<CartesianAxis> {
                        new LinearCartesianAxis {
                            Ticks = new LinearCartesianTicks {
                                AutoSkip = false,
                                Min = 0 // Otherwise the lowest value in the dataset won't be visible

                            }
                        }
                    }
                }


            }
        };
        _barChartConfig.Data.Labels.AddRange(Range());
        

        _barDataSet = new BarDataset<DoubleWrapper>
        {
            Label = "Estimated time",
            BackgroundColor = "red",
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };


        _barDataSet.AddRange(DoubleArray().Wrap());
        _barChartConfig.Data.Datasets.Add(_barDataSet);

    }

    private double[] DoubleArray()
    {
        List<double> ints = new List<double>();
        for (int i = 0; i < array.Length; i++)
        {
            ints.Add(array[i]);
        }
        double[] d = ints.ToArray();
        return d;
    }

    private string[] Range()
    {
        List<string> t = new List<string>();
        for (int i = 0; i < array.Length; i++)
        {
            t.Add(i + "");
        }
        string[] str = t.ToArray();
        return str;
    }

    private void AddData()
    {
        var nowSecond = DateTime.Now.Second;
        _barChartConfig.Data.Labels.Add(nowSecond.ToString());
        _barDataSet.Add(new DoubleWrapper(nowSecond));

        _barChart.Update();

    }

    private void RemoveData()
    {
        if (_barChartConfig.Data.Labels.Count > 0)
        {
            _barChartConfig.Data.Labels.RemoveAt(_barChartConfig.Data.Labels.Count - 1);
        }

        if (_barDataSet.Data.Count > 0)
        {
            _barDataSet.RemoveAt(_barDataSet.Data.Count - 1);
        }

        _barChart.Update();
    }
}