#pragma checksum "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "25244aa60323cf42a85f087da60daa8b8c9a59cd"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace SortingDeploy.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\_Imports.razor"
using SortingDeploy;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\_Imports.razor"
using SortingDeploy.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\_Imports.razor"
using ChartJs.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\Pages\Index.razor"
using System.Diagnostics;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\Pages\Index.razor"
using System.Threading;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\Pages\Index.razor"
using SortingDeploy.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\Pages\Index.razor"
using SortingDeploy.Pages.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\Pages\Index.razor"
using ChartJs.Blazor.ChartJS.BarChart;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\Pages\Index.razor"
using ChartJs.Blazor.ChartJS.BarChart.Axes;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\Pages\Index.razor"
using ChartJs.Blazor.ChartJS.Common.Axes;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\Pages\Index.razor"
using ChartJs.Blazor.ChartJS.Common.Axes.Ticks;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\Pages\Index.razor"
using ChartJs.Blazor.ChartJS.Common.Properties;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\Pages\Index.razor"
using ChartJs.Blazor.ChartJS.Common.Wrappers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\Pages\Index.razor"
using ChartJs.Blazor.Charts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\Pages\Index.razor"
using ChartJs.Blazor.Util;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 50 "C:\Users\zotyo\Documents\GitHub\SortingDeploy\SortingDeploy\Pages\Index.razor"
       

    SortingMethods srt = new SortingMethods();
    private bool b = false;
    private int arraySize = 10;
    private int[] array;
    private string stro = "";

    private string sortingType = "Bubble Sort";
    private int numberOfRandoms;
    private int rangeOfRandoms;
    private int printSize = 27;
    private int printRange = 52;
    private int printTime = 25;
    private string currentArray;
    private string tempArray;
    private int check;
    private bool checkBool;
    private bool IsDisabled { get; set; }
    private bool startScenario;


    private BarConfig _barChartConfig;
    private ChartJsBarChart _barChart;
    private BarDataset<DoubleWrapper> _barDataSet;

    public void CalcSize(string step)
    {

        printSize = Convert.ToInt32(step);

        Randomize();


    }
    public void CalcRange(string step)
    {
        printRange = Convert.ToInt32(step);

        Randomize();


    }
    public void CalcTime(string step)
    {
        printTime = Convert.ToInt32(step);
    }


    private void Randomize()
    {
        check = 1;

        startScenario = false;
        _barDataSet.RemoveRange(0, arraySize);
        _barChartConfig.Data.Labels.RemoveRange(0, arraySize);

        checkBool = true;
        array = new int[printSize];
        arraySize = printSize;

        stro = "";
        srt.CreateRandomArray(arraySize, array, printRange);
        for (int i = 0; i < array.Length; i++)
        {
            stro = stro + " " + array[i];
        }
        Debug.WriteLine(stro);


        Update(array);


    }

    private async void Sort()
    {
        //isEnded = false;
        await Disable();
        IsFirst();

        if (sortingType == "Bubble Sort")
        {
            await srt.BubbleSort(array, arraySize, this, printTime);
        }
        else if (sortingType == "Selection Sort")
        {
            await srt.SelectionSort(array, arraySize, this, printTime);
        }
        else if (sortingType == "Insertion Sort")
        {
            await srt.InsertionSort(array, arraySize, this, printTime);
        }
        else if (sortingType == "Quick Sort")
        {
            await srt.QuickSortCall(array, 0, arraySize - 1, this, printTime * 3);
        }



    }

    public async Task Update(int[] a)
    {
        Debug.WriteLine("kuka");
        array = a;

        if (check == 1)
        {
            Debug.WriteLine("Before add range: " + check);
            _barChartConfig.Data.Labels.AddRange(Range());

            Debug.WriteLine("After add range: " + check);
        }

        check++;
        if (check > 2)
        {
            _barDataSet.RemoveRange(0, arraySize);

        }

        _barDataSet.AddRange(DoubleArray().Wrap());

        await _barChart.Update();

        tempArray = "";

    }

    protected override void OnInitialized()
    {
        _barChartConfig = new BarConfig
        {
            Options = new BarOptionsSub
            {
                Animation = new Animation()
                {
                    Duration = 0
                },
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Simple Bar Chart"
                },

                Responsive = true,
                Scales = new BarScales
                {
                    YAxes = new List<CartesianAxis> {
                        new LinearCartesianAxis {
                            Ticks = new LinearCartesianTicks {
                                AutoSkip = false,
                                Min = 0
                            }
                        }
                    }
                }
            }
        };


        check = 1;
        array = new int[printSize];
        arraySize = printSize;


        srt.CreateRandomArray(arraySize, array, printRange);

        _barDataSet = new BarDataset<DoubleWrapper>
        {
            Label = "",
            BackgroundColor = "red",
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };

        _barDataSet.AddRange(DoubleArray().Wrap());
        _barChartConfig.Data.Datasets.Add(_barDataSet);

        _barChartConfig.Data.Labels.AddRange(Range());
        checkBool = true;

        for (int i = 0; i < array.Length; i++)
        {
            stro = stro + " " + array[i];
        }
        Debug.WriteLine(stro);
        startScenario = true;
    }

    private double[] DoubleArray()
    {
        List<double> temp = new List<double>();
        if (array != null)
        {
            for (int i = 0; i < array.Length; i++)
            {
                temp.Add(array[i]);
            }
            double[] d = temp.ToArray();
            return d;
        }
        if (array == null)
        {
            double[] d = temp.ToArray();
            return d;
        }
        return null;
    }

    private string[] Range()
    {
        List<string> temp = new List<string>();
        if (array == null)
        {

            string[] str = temp.ToArray();
            return str;
        }
        else
        {
            for (int i = 0; i < array.Length; i++)
            {
                temp.Add(i + "");
            }
            string[] str = temp.ToArray();
            return str;
        }

    }

    public async Task Disable()
    {
        IsDisabled = true;

        //if (startScenario)
        //{
        //    _barChartConfig.Data.Labels.RemoveRange(0, arraySize);
        //    _barDataSet.RemoveRange(0, arraySize);
        //    startScenario = false;
        //}
    }
    public void Enable()
    {
        IsDisabled = false;

    }
    public void IsFirst()
    {
        if (startScenario)
        {
            _barChartConfig.Data.Labels.RemoveRange(0, arraySize);
            _barDataSet.RemoveRange(0, arraySize);
            startScenario = false;
        }
    }


#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
